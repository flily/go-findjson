package findjson

const (
	JsonLiteralTrue   = "true"
	JsonLiteralFalse  = "false"
	JsonLiteralNull   = "null"
	JsonBackslash     = '\\'
	JsonSignPositive  = '+'
	JsonSignNegative  = '-'
	JsonExponentUpper = 'E'
	JsonExponentLower = 'e'
	JsonLBraket       = '['
	JsonRBraket       = ']'
	JsonLBrace        = '{'
	JsonRBrace        = '}'
	JsonColon         = ':'
	JsonComma         = ','
	JsonPeriod        = '.'
	JsonQuote         = '"'
	JsonDigitZero     = '0'

	JsonCharsetWhiteSpace    = 0x01
	JsonCharsetEscapeChars   = 0x02
	JsonCharsetDigits        = 0x04
	JsonCharsetDigitsNonZero = 0x08
	JsonCharsetHexdigits     = 0x10

	AsciiMask = 0x80
)

const (
	// abbreviations
	jWSP = JsonCharsetWhiteSpace
	jDGT = JsonCharsetDigits | JsonCharsetDigitsNonZero | JsonCharsetHexdigits
	jHEX = JsonCharsetHexdigits
	jESC = JsonCharsetEscapeChars
	jCH0 = JsonCharsetDigits | JsonCharsetHexdigits
	jCHb = JsonCharsetHexdigits | JsonCharsetEscapeChars
	jCHf = JsonCharsetHexdigits | JsonCharsetEscapeChars
)

var charmap = [256]byte{
	// 0     1     2     3     4     5     6     7
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x00
	// 8     9     A     B     C     D     E     F
	0x00, jWSP, jWSP, 0x00, 0x00, jWSP, 0x00, 0x00, // 0x08
	// 0	 1     2     3     4     5     6     7
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x10
	// 8     9     A     B     C     D     E     F
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x18
	// 0     1     2     3     4     5     6     7
	jWSP, 0x00, jESC, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x20
	// 8     9     A     B     C     D     E     F
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, jESC, // 0x28
	// 0     1     2     3     4     5     6     7
	jCH0, jDGT, jDGT, jDGT, jDGT, jDGT, jDGT, jDGT, // 0x30
	// 8     9     A     B     C     D     E     F
	jDGT, jDGT, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x38
	// 0     1     2     3     4     5     6     7
	0x00, jHEX, jHEX, jHEX, jHEX, jHEX, jHEX, 0x00, // 0x40
	// 8     9     A     B     C     D     E     F
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x48
	// 0     1     2     3     4     5     6     7
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x50
	// 8     9     A     B     C     D     E     F
	0x00, 0x00, 0x00, 0x00, jESC, 0x00, 0x00, 0x00, // 0x58
	// 0     1     2     3     4     5     6     7
	0x00, jHEX, jCHb, jHEX, jHEX, jHEX, jCHf, 0x00, // 0x60
	// 8     9     A     B     C     D     E     F
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, jESC, 0x00, // 0x68
	// 0     1     2     3     4     5     6     7
	0x00, 0x00, jESC, 0x00, jESC, 0x00, 0x00, 0x00, // 0x70
	// 8     9     A     B     C     D     E     F
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x78
	// 0x80 - 0xFF
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x80
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x88
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x90
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x98
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xA0
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xA8
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xB0
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xB8
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xC0
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xC8
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xD0
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xD8
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xE0
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xE8
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xF0
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0xF8
}

func isWhiteSpace(c byte) bool {
	return charmap[c]&JsonCharsetWhiteSpace != 0
}

func isEscapeChar(c byte) bool {
	return charmap[c]&JsonCharsetEscapeChars != 0
}

func isDigit(c byte) bool {
	return charmap[c]&JsonCharsetDigits != 0
}

func isHexdigit(c byte) bool {
	return charmap[c]&JsonCharsetHexdigits != 0
}

func isNonZeroDigit(c byte) bool {
	return charmap[c]&JsonCharsetDigitsNonZero != 0
}
